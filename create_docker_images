#!/usr/bin/env python3

##############################################################################################################################
# Command - ./createDockerImages
# Program will navigate to each directory, create docker packages and push it to the docker hub
##############################################################################################################################
from argparse import RawTextHelpFormatter

import os
import glob
import argparse
import sys


def parseCommandLineArguments():

    parser = argparse.ArgumentParser( prog = "create_docker_images", description = """Generates docker images and test out cwl scripts. Assumes that cwltool is pre-installed.
    A few commands are tested for each cwl script.
    This is done to ensure that the command is working properly, not to test the entire extent of what the command can do.
    Please note that depending on what you provide as input your command may fail.""", formatter_class = RawTextHelpFormatter )

    parser.add_argument( "--docker_hub", "-docker_hub", help = "Enter the name of the docker hub", default = ["ghcr.io/sagnikbanerjee15/dockerized_tools_and_pipelines"], nargs = '+' )
    parser.add_argument( "--error_directory", "-error_directory", help = "Enter the location of the error directory", required = True )

    # Optional arguments
    parser.add_argument( "--skip_these", "--skip_these", help = "Enter the list of tools to skip processing", nargs = '*' )
    parser.add_argument( "--process_only_these", "--process_only_these", help = "Enter the list of tools to process. Everything else will be ignored", nargs = '*' )
    return parser.parse_args()


def main():
    """
    """
    options = parseCommandLineArguments()

    tools_with_version_and_dockerfiles = {}
    tools = os.listdir( "." )
    tools = [val for val in tools if "sample_test_data" not in val]
    for tool in tools:
        # print( tool, os.path.isdir( tool ) )
        if "DS_Store" in tool or tool == ".git":continue
        if os.path.isdir( tool ) == False:continue
        if os.path.exists( f"{tool}/Dockerfile" ) == True:
            tools_with_version_and_dockerfiles[tool] = {"latest":f"{tool}/Dockerfile"}
        else:
            versions = os.listdir( f"{tool}" )
            tools_with_version_and_dockerfiles[tool] = {}
            for version in versions:
                if "DS_Store" in version or ".output" in version or "error" in version:continue
                tools_with_version_and_dockerfiles[tool][version] = f"{tool}/{version}/Dockerfile"

    current_directory = os.getcwd()

    os.system( f"mkdir -p {options.error_directory}" )
    if  options.skip_these is None:
        options.skip_these = []
    if options.process_only_these is None:
        options.process_only_these = [tool for tool in tools_with_version_and_dockerfiles ]
    process_only_these = [tool for tool in tools_with_version_and_dockerfiles if tool in options.process_only_these]
    options.skip_these = set( options.skip_these ) | ( set( [tool for tool in tools_with_version_and_dockerfiles ] ) - set( process_only_these ) )

    for tool in tools_with_version_and_dockerfiles:
        if options.skip_these is not None and tool in options.skip_these: continue
        for version in tools_with_version_and_dockerfiles[tool]:

            if version != "latest":
                print( f"Changing to {current_directory}/{tool}/{version}" )
                sys.stdout.flush()
                os.chdir( f"{current_directory}/{tool}/{version}" )
            else:
                print( f"Changing to {current_directory}/{tool}" )
                sys.stdout.flush()
                os.chdir( f"{current_directory}/{tool}" )
            for docker_hub in options.docker_hub:
                # Attempt to pull from ghcr
                cmd = f"docker pull {docker_hub}/{tool.lower()}:{version}"
                print( cmd )
                os.system( cmd )
                sys.stdout.flush()

                cmd = f"docker build -t {docker_hub}/{tool.lower()}:{version} . > {options.error_directory}/{tool}:{version}_docker_build.output 2> {options.error_directory}/{tool}:{version}_docker_build.error"
                print( f"Building {tool} {version}. Executing command - {cmd} from {os.getcwd()}" )
                sys.stdout.flush()
                os.system( cmd )

                cmd = f"docker push {docker_hub}/{tool.lower()}:{version}"
                print( cmd )
                os.system( cmd )
                sys.stdout.flush()
            os.chdir( f"{current_directory}" )


if __name__ == "__main__":
    main()
